---
# Copyright (c) 2025 Nho Luong <luongutnho@hotmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: Start up Nova API docker container
  hosts: docker-servers
  become: true

  pre_tasks:

    - name: Copy utility script
      copy:
        src: files/get_docker_ip.sh
        dest: /usr/local/bin/get_docker_ip.sh
        owner: root
        group: root
        mode: 0770

  tasks:

    - name: Start Auto-DNS container
      docker_container:
        image: rehabstudio/autodns
        name: "{{ AUTODNS_HOSTNAME }}"
        hostname: "{{ AUTODNS_HOSTNAME }}"
        restart_policy: always
        ports: 0.0.0.0:53:53/udp
        volumes: /var/run/docker.sock:/var/run/docker.sock
      register: autodns_status

    - name: Add a host entry for docker-server.local
      shell: "docker exec -i \"{{ AUTODNS_HOSTNAME }}\" bash -c \"echo {{ DOCKER_SERVER_EXTERNAL_IP }} {{ DOCKER_SERVER_HOSTNAME }} >> /etc/hosts\""
      when: autodns_status|changed

    - name: Start Memcached container
      docker_container:
        image: os-memcached
        name: "{{ MEMCACHED_HOSTNAME }}"
        hostname: "{{ MEMCACHED_HOSTNAME }}"
        restart_policy: always
        expose: 11211/tcp

    - name: Waiting for Memcached to become available
      wait_for:
        host: "{{ MEMCACHED_HOSTNAME }}"
        port: 11211
        state: started

    - name: Creating MySQL data container
      docker_container:
        name: "{{ MYSQL_DATA_CONTAINER_NAME }}"
        image: os-base-image
        state: present
        command: /bin/true
        volumes:
          - /var/lib/mysql

    - name: Start MySQL container
      docker_container:
        image: os-mysql
        name: "{{ MYSQL_HOSTNAME }}"
        hostname: "{{ MYSQL_HOSTNAME }}"
        restart_policy: always
        expose: 3306/tcp
        volumes_from:
          - "{{ MYSQL_DATA_CONTAINER_NAME }}"
        env:
          MYSQL_ROOT_PASSWORD: "{{ MYSQL_ROOT_PASSWORD }}"

    - name: Waiting for MySQL to become available
      wait_for:
        host: "{{ MYSQL_HOSTNAME }}"
        port: 3306
        state: started

    - name: Create OpenStack services databases
      mysql_db:
        name: "{{ item }}"
        state: present
        login_host: "{{ MYSQL_HOSTNAME }}"
        login_user: root
        login_password: "{{ MYSQL_ROOT_PASSWORD }}"
        encoding: "utf8"
        collation: "utf8_general_ci"
      with_items:
        - glance
        - ironic
        - keystone
        - neutron
        - nova

    - name: Set OpenStack databases users
      mysql_user:
        name: "{{ item.name }}"
        host: "%"
        password: "{{ item.password }}"
        priv: "{{ item.db }}.*:ALL"
        state: present
        login_host: "{{ MYSQL_HOSTNAME }}"
        login_user: root
        login_password: "{{ MYSQL_ROOT_PASSWORD }}"
      with_items:
        - name: "{{ GLANCE_DB_USER }}"
          password: "{{ GLANCE_DB_PASS }}"
          db: glance
        - name: "{{ IRONIC_DB_USER }}"
          password: "{{ IRONIC_DB_PASS }}"
          db: ironic
        - name: "{{ KEYSTONE_DB_USER }}"
          password: "{{ KEYSTONE_DB_PASS }}"
          db: keystone
        - name: "{{ NEUTRON_DB_USER }}"
          password: "{{ NEUTRON_DB_PASS }}"
          db: neutron
        - name: "{{ NOVA_DB_USER }}"
          password: "{{ NOVA_DB_PASS }}"
          db: nova

    - name: Start Keystone container
      docker_container:
        image: os-keystone
        name: "{{ KEYSTONE_HOSTNAME }}"
        hostname: "{{ KEYSTONE_HOSTNAME }}"
        restart_policy: always
        ports:
          - 0.0.0.0:5000:5000/tcp
          - 0.0.0.0:35357:35357/tcp
        env:
          KEYSTONE_SERVICE_TOKEN: "{{ KEYSTONE_SERVICE_TOKEN }}"
          KEYSTONE_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          KEYSTONE_DB_USER: "{{ KEYSTONE_DB_USER }}"
          KEYSTONE_DB_PASS: "{{ KEYSTONE_DB_PASS }}"
          KEYSTONE_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"

    - name: Waiting for Keystone to become available
      wait_for:
        host: "{{ KEYSTONE_HOSTNAME }}"
        port: "{{ item }}"
        delay: 2
        state: started
      with_items:
        - 35357
        - 5000

    - name: Create Keystone admin tenant
      os_user:
        tenant: admin
        tenant_description:  "Admin tenant"
        endpoint: "http://{{ KEYSTONE_HOSTNAME }}:35357/v2.0"
        token: "{{ KEYSTONE_SERVICE_TOKEN }}"
        state: "present"

    - name: Create Keystone service tenant
      os_user:
        tenant: "{{ SERVICE_TENANT_NAME }}"
        tenant_description: "Service tenant"
        endpoint: "http://{{ KEYSTONE_HOSTNAME }}:35357/v2.0"
        token: "{{ KEYSTONE_SERVICE_TOKEN }}"
        state: "present"
      register: service_tenant_status

    - name: Gather Service tenant id
      set_fact:
        service_tenant_id: "{{ service_tenant_status.id }}"

    - name: Create Keystone users
      os_user:
        user: "{{ item.name }}"
        password: "{{ item.password }}"
        tenant: "{{ item.tenant }}"
        email: "{{ item.email|default('nobody@localhost') }}"
        endpoint: "http://{{ KEYSTONE_HOSTNAME }}:35357/v2.0"
        token: "{{ KEYSTONE_SERVICE_TOKEN }}"
        state: "present"
      with_items:
        - name: admin
          password: "{{ KEYSTONE_ADMIN_PASSWORD }}"
          tenant: admin
        - name: "{{ GLANCE_SERVICE_USER }}"
          password: "{{ GLANCE_SERVICE_PASS }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: "{{ NEUTRON_SERVICE_USER }}"
          password: "{{ NEUTRON_SERVICE_PASS }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: "{{ NOVA_SERVICE_USER }}"
          password: "{{ NOVA_SERVICE_PASS }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: "{{ SWIFT_SERVICE_USER }}"
          password: "{{ SWIFT_SERVICE_PASS }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: "{{ IRONIC_SERVICE_USER }}"
          password: "{{ IRONIC_SERVICE_PASS }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"

    - name: Add Keystone roles to defined users in defined tenants
      os_user:
        role: "{{ item.name }}"
        user: "{{ item.user }}"
        tenant: "{{ item.tenant }}"
        endpoint: "http://{{ KEYSTONE_HOSTNAME }}:35357/v2.0"
        token: "{{ KEYSTONE_SERVICE_TOKEN }}"
        state: "present"
      with_items:
        - name: admin
          user: admin
          tenant: admin
        - name: admin
          user: "{{ GLANCE_SERVICE_USER }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: admin
          user: "{{ NEUTRON_SERVICE_USER }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: admin
          user: "{{ NOVA_SERVICE_USER }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: admin
          user: "{{ SWIFT_SERVICE_USER }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"
        - name: admin
          user: "{{ IRONIC_SERVICE_USER }}"
          tenant: "{{ SERVICE_TENANT_NAME }}"

    - name: Create Keystone services
      keystone_service:
        name: "{{ item.name }}"
        service_type: "{{ item.service_type }}"
        description: "{{ item.description|default('Not provided') }}"
        endpoint: "http://{{ KEYSTONE_HOSTNAME }}:35357/v2.0"
        token: "{{ KEYSTONE_SERVICE_TOKEN }}"
        state: "present"
      with_items:
        - { name: keystone, service_type: identity }
        - { name: glance, service_type: image }
        - { name: neutron, service_type: network }
        - { name: nova, service_type: compute }
        - { name: swift, service_type: object-store }
        - { name: ironic, service_type: baremetal }

    - name: Create Keystone endpoints
      keystone_endpoint:
        service_name: "{{ item.service_name }}"
        region: "regionOne"
        public_url: "{{ item.public_url }}"
        internal_url: "{{ item.internal_url }}"
        admin_url: "{{ item.admin_url }}"
        endpoint: "http://{{ KEYSTONE_HOSTNAME }}:35357/v2.0"
        token: "{{ KEYSTONE_SERVICE_TOKEN }}"
        state: "present"
      with_items:
        - service_name: keystone
          public_url: "http://{{ DOCKER_SERVER_HOSTNAME }}:5000/v2.0"
          internal_url: "http://{{ KEYSTONE_HOSTNAME }}:5000/v2.0"
          admin_url: "http://{{ KEYSTONE_HOSTNAME }}:35357/v2.0"
        - service_name: glance
          public_url: "http://{{ DOCKER_SERVER_HOSTNAME }}:9292/"
          internal_url: "http://{{ GLANCE_API_HOSTNAME }}:9292/"
          admin_url: "http://{{ GLANCE_API_HOSTNAME }}:9292/"
        - service_name: neutron
          public_url: "http://{{ DOCKER_SERVER_HOSTNAME }}:9696/"
          internal_url: "http://{{ NEUTRON_SERVER_HOSTNAME }}:9696/"
          admin_url: "http://{{ NEUTRON_SERVER_HOSTNAME }}:9696/"
        - service_name: nova
          public_url: "http://{{ DOCKER_SERVER_HOSTNAME }}:8774/v2/%(tenant_id)s"
          internal_url: "http://{{ NOVA_API_HOSTNAME }}:8774/v2/%(tenant_id)s"
          admin_url: "http://{{ NOVA_API_HOSTNAME }}:8774/v2/%(tenant_id)s"
        - service_name: swift
          public_url: "http://{{ DOCKER_SERVER_HOSTNAME }}:8080/v1/AUTH_%(tenant_id)s"
          internal_url: "http://{{ SWIFT_PROXY_HOSTNAME }}:8080/v1/AUTH_%(tenant_id)s"
          admin_url: "http://{{ SWIFT_PROXY_HOSTNAME }}:8080/"
        - service_name: ironic
          public_url: "http://{{ DOCKER_SERVER_HOSTNAME }}:6385/"
          internal_url: "http://{{ IRONIC_API_HOSTNAME }}:6385/"
          admin_url: "http://{{ IRONIC_API_HOSTNAME }}:6385/"

    - name: Start RabbitMQ container
      docker_container:
        image: os-rabbitmq
        name: "{{ RABBITMQ_HOSTNAME }}"
        hostname: "{{ RABBITMQ_HOSTNAME }}"
        restart_policy: always
        expose: 5672
        env:
          RABBITMQ_ERLANG_COOKIE: "{{ RABBITMQ_ERLANG_COOKIE }}"
      register: rabbitmq_status

    - name: Waiting for RabbitMQ to become available
      wait_for:
        host: "{{ RABBITMQ_HOSTNAME }}"
        port: 5672
        state: started

    - name: Create RabbitMQ users
      shell: "docker exec -i \"{{ RABBITMQ_HOSTNAME }}\" rabbitmqctl add_user \"{{ item.user }}\" \"{{ item.pass }}\""
      with_items:
        - user: "{{ GLANCE_RABBITMQ_USER }}"
          pass: "{{ GLANCE_RABBITMQ_PASS }}"
        - user: "{{ NOVA_RABBITMQ_USER }}"
          pass: "{{ NOVA_RABBITMQ_PASS }}"
        - user: "{{ NEUTRON_RABBITMQ_USER }}"
          pass: "{{ NEUTRON_RABBITMQ_PASS }}"
        - user: "{{ IRONIC_RABBITMQ_USER }}"
          pass: "{{ IRONIC_RABBITMQ_PASS }}"
      when: rabbitmq_status|changed

    - name: Create RabbitMQ users
      shell: "docker exec -i \"{{ RABBITMQ_HOSTNAME }}\" rabbitmqctl set_permissions \"{{ item }}\" \".*\" \".*\" \".*\""
      with_items:
        - "{{ GLANCE_RABBITMQ_USER }}"
        - "{{ NOVA_RABBITMQ_USER }}"
        - "{{ NEUTRON_RABBITMQ_USER }}"
        - "{{ IRONIC_RABBITMQ_USER }}"
      when: rabbitmq_status|changed

    - name: Creating PXE/iPXE data container
      docker_container:
        name: "{{ PXE_BOOT_DATA_CONTAINER_NAME }}"
        image: os-base-image
        state: present
        command: /bin/true
        volumes:
          - /pxe

    - name: Start TFTPd Server container
      docker_container:
        image: os-tftpboot
        name: "{{ PXE_TFTPD_HOSTNAME }}"
        hostname: "{{ PXE_TFTPD_HOSTNAME }}"
        restart_policy: always
        ports:
          - 0.0.0.0:69:69/udp
        volumes_from:
          - "{{ PXE_BOOT_DATA_CONTAINER_NAME }}"

    - name: Start Apache server (iPXE) container
      docker_container:
        image: os-httpboot
        name: "{{ IPXE_HTTPD_HOSTNAME }}"
        hostname: "{{ IPXE_HTTPD_HOSTNAME }}"
        restart_policy: always
        ports:
          - 0.0.0.0:8090:80/tcp
        volumes_from:
          - "{{ PXE_BOOT_DATA_CONTAINER_NAME }}:ro"

    - name: Waiting for Apache server (iPXE) to become available
      wait_for:
        host: "{{ IPXE_HTTPD_HOSTNAME }}"
        port: 80
        state: started

    - name: Start Ironic Conductor container
      docker_container:
        image: os-ironic-conductor
        name: "{{ IRONIC_CONDUCTOR_HOSTNAME }}"
        hostname: "{{ IRONIC_CONDUCTOR_HOSTNAME }}"
        restart_policy: always
        volumes_from:
          - "{{ PXE_BOOT_DATA_CONTAINER_NAME }}"
        env:
          IRONIC_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          IRONIC_DB_USER: "{{ IRONIC_DB_USER }}"
          IRONIC_DB_PASS: "{{ IRONIC_DB_PASS }}"
          IRONIC_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          IRONIC_RABBITMQ_USER: "{{ IRONIC_RABBITMQ_USER }}"
          IRONIC_RABBITMQ_PASS: "{{ IRONIC_RABBITMQ_PASS }}"
          IRONIC_IDENTITY_URI: "{{ IDENTITY_URI }}"
          IRONIC_AUTH_URI: "{{ AUTH_URI }}"
          IRONIC_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          IRONIC_SERVICE_USER: "{{ IRONIC_SERVICE_USER }}"
          IRONIC_SERVICE_PASS: "{{ IRONIC_SERVICE_PASS }}"
          IRONIC_SWIFT_TEMP_URL_KEY: "{{ IRONIC_SWIFT_TEMP_URL_KEY }}"
          IRONIC_SWIFT_ENDPOINT_URL: "http://{{ SWIFT_PROXY_HOSTNAME }}:8080"
          IRONIC_SWIFT_ACCOUNT: "AUTH_{{ service_tenant_id }}"
          IRONIC_SWIFT_CONTAINER: "glance"
          IRONIC_GLANCE_API_URLS: "http://{{ GLANCE_API_HOSTNAME }}:9292"
          IRONIC_NEUTRON_SERVER_URL: "http://{{ NEUTRON_SERVER_HOSTNAME }}:9696"
          IRONIC_CLEAN_NODE: "false"
          IRONIC_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"
          IRONIC_TFTP_SERVER: "{{ DOCKER_SERVER_INTERNAL_IP }}"
          IRONIC_IPXE_HTTP_URL: "http://{{ DOCKER_SERVER_INTERNAL_IP }}:8090"
          IRONIC_USE_IPXE: "true"
          IRONIC_NOTIFICATIONS: "{{ ENABLE_IRONIC_NOTIFICATIONS }}"

    - name: Start Ironic API container
      docker_container:
        image: os-ironic-api
        name: "{{ IRONIC_API_HOSTNAME }}"
        hostname: "{{ IRONIC_API_HOSTNAME }}"
        restart_policy: always
        ports:
            - 0.0.0.0:6385:6385/tcp
        env:
          IRONIC_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          IRONIC_DB_USER: "{{ IRONIC_DB_USER }}"
          IRONIC_DB_PASS: "{{ IRONIC_DB_PASS }}"
          IRONIC_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          IRONIC_RABBITMQ_USER: "{{ IRONIC_RABBITMQ_USER }}"
          IRONIC_RABBITMQ_PASS: "{{ IRONIC_RABBITMQ_PASS }}"
          IRONIC_IDENTITY_URI: "{{ IDENTITY_URI }}"
          IRONIC_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          IRONIC_SERVICE_USER: "{{ IRONIC_SERVICE_USER }}"
          IRONIC_SERVICE_PASS: "{{ IRONIC_SERVICE_PASS }}"
          IRONIC_SWIFT_TEMP_URL_KEY: "{{ IRONIC_SWIFT_TEMP_URL_KEY }}"
          IRONIC_SWIFT_ENDPOINT_URL: "http://{{ SWIFT_PROXY_HOSTNAME }}:8080"
          IRONIC_SWIFT_ACCOUNT: "AUTH_{{ service_tenant_id }}"
          IRONIC_SWIFT_CONTAINER: "glance"
          IRONIC_GLANCE_API_URLS: "http://{{ GLANCE_API_HOSTNAME }}:9292"
          IRONIC_NEUTRON_SERVER_URL: "http://{{ NEUTRON_SERVER_HOSTNAME }}:9696"
          IRONIC_CLEAN_NODE: "false"
          IRONIC_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"
          IRONIC_NOTIFICATIONS: "{{ ENABLE_IRONIC_NOTIFICATIONS }}"

    - name: Waiting for Ironic API to become available
      wait_for:
        host: "{{ IRONIC_API_HOSTNAME }}"
        port: 6385
        state: started

    - name: Start Neutron Server container
      docker_container:
        image: os-neutron-server
        name: "{{ NEUTRON_SERVER_HOSTNAME }}"
        hostname: "{{ NEUTRON_SERVER_HOSTNAME }}"
        restart_policy: always
        ports:
          - 0.0.0.0:9696:9696/tcp
        env:
          NEUTRON_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          NEUTRON_DB_USER: "{{ NEUTRON_DB_USER }}"
          NEUTRON_DB_PASS: "{{ NEUTRON_DB_PASS }}"
          NEUTRON_NOVA_URL: "http://{{ NOVA_API_HOSTNAME }}:8774/v2"
          NEUTRON_IDENTITY_URI: "{{ IDENTITY_URI }}"
          NEUTRON_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NEUTRON_SERVICE_USER: "{{ NEUTRON_SERVICE_USER }}"
          NEUTRON_SERVICE_PASS: "{{ NEUTRON_SERVICE_PASS }}"
          NOVA_AUTH_URL: "{{ AUTH_URI }}"
          NOVA_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_SERVICE_USER: "{{ NOVA_SERVICE_USER }}"
          NOVA_SERVICE_PASS: "{{ NOVA_SERVICE_PASS }}"
          NEUTRON_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          NEUTRON_RABBITMQ_USER: "{{ NEUTRON_RABBITMQ_USER }}"
          NEUTRON_RABBITMQ_PASS: "{{ NEUTRON_RABBITMQ_PASS }}"
          NEUTRON_EXTERNAL_NETWORKS: "external"
          NEUTRON_BRIDGE_MAPPINGS: "external:br-ex"

    - name: Waiting for Neutron Server to become available
      wait_for:
        host: "{{ NEUTRON_SERVER_HOSTNAME }}"
        port: 9696
        state: started

    - name: Start Neutron DHCP agent container
      docker_container:
        image: os-neutron-dhcp-agent
        name: "{{ NEUTRON_DHCP_AGENT_HOSTNAME }}"
        hostname: "{{ NEUTRON_DHCP_AGENT_HOSTNAME }}"
        restart_policy: always
        volumes:
          - /lib/modules:/lib/modules:ro
        privileged: true
        env:
          NEUTRON_IDENTITY_URI: "{{ IDENTITY_URI }}"
          NEUTRON_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NEUTRON_SERVICE_USER: "{{ NEUTRON_SERVICE_USER }}"
          NEUTRON_SERVICE_PASS: "{{ NEUTRON_SERVICE_PASS }}"
          NEUTRON_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          NEUTRON_RABBITMQ_USER: "{{ NEUTRON_RABBITMQ_USER }}"
          NEUTRON_RABBITMQ_PASS: "{{ NEUTRON_RABBITMQ_PASS }}"
          NEUTRON_EXTERNAL_NETWORKS: "external"
          NEUTRON_BRIDGE_MAPPINGS: "external:br-ex"
          NEUTRON_ENABLE_IPXE: "true"

    - name: Start Nova Conductor container
      docker_container:
        image: os-nova-conductor
        name: "{{ NOVA_CONDUCTOR_HOSTNAME }}"
        hostname: "{{ NOVA_CONDUCTOR_HOSTNAME }}"
        restart_policy: always
        env:
          NOVA_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          NOVA_DB_USER: "{{ NOVA_DB_USER }}"
          NOVA_DB_PASS: "{{ NOVA_DB_PASS }}"
          NOVA_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          NOVA_RABBITMQ_USER: "{{ NOVA_RABBITMQ_USER }}"
          NOVA_RABBITMQ_PASS: "{{ NOVA_RABBITMQ_PASS }}"
          NOVA_IDENTITY_URI: "{{ IDENTITY_URI }}"
          NOVA_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_SERVICE_USER: "{{ NOVA_SERVICE_USER }}"
          NOVA_SERVICE_PASS: "{{ NOVA_SERVICE_PASS }}"
          NOVA_GLANCE_API_URLS: "http://{{ GLANCE_API_HOSTNAME }}:9292"
          NOVA_NEUTRON_SERVER_URL: "http://{{ NEUTRON_SERVER_HOSTNAME }}:9696"
          NOVA_IRONIC_API_ENDPOINT: "http://{{ IRONIC_API_HOSTNAME }}:6385/v1"
          NOVA_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"
          NOVA_NOTIFICATIONS: "{{ ENABLE_NOVA_NOTIFICATIONS }}"

    - name: Start Nova API container
      docker_container:
        image: os-nova-api
        name: "{{ NOVA_API_HOSTNAME }}"
        hostname: "{{ NOVA_API_HOSTNAME }}"
        restart_policy: always
        privileged: true
        volumes:
          - /lib/modules:/lib/modules:ro
        ports:
          - 0.0.0.0:8774:8774/tcp
        env:
          NOVA_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          NOVA_DB_USER: "{{ NOVA_DB_USER }}"
          NOVA_DB_PASS: "{{ NOVA_DB_PASS }}"
          NOVA_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          NOVA_RABBITMQ_USER: "{{ NOVA_RABBITMQ_USER }}"
          NOVA_RABBITMQ_PASS: "{{ NOVA_RABBITMQ_PASS }}"
          NOVA_IDENTITY_URI: "{{ IDENTITY_URI }}"
          NOVA_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_SERVICE_USER: "{{ NOVA_SERVICE_USER }}"
          NOVA_SERVICE_PASS: "{{ NOVA_SERVICE_PASS }}"
          NOVA_GLANCE_API_URLS: "http://{{ GLANCE_API_HOSTNAME }}:9292"
          NOVA_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"
          NOVA_IRONIC_API_ENDPOINT: "http://{{ IRONIC_API_HOSTNAME }}:6385/v1"
          NOVA_IRONIC_SERVICE_USER: "{{ IRONIC_SERVICE_USER }}"
          NOVA_IRONIC_SERVICE_PASS: "{{ IRONIC_SERVICE_PASS }}"
          NOVA_IRONIC_AUTH_URI: "{{ AUTH_URI }}"
          NOVA_IRONIC_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_NEUTRON_SERVER_URL: "http://{{ NEUTRON_SERVER_HOSTNAME }}:9696"
          NOVA_NEUTRON_SERVICE_USER: "{{ NEUTRON_SERVICE_USER }}"
          NOVA_NEUTRON_SERVICE_PASS: "{{ NEUTRON_SERVICE_PASS }}"
          NOVA_NEUTRON_AUTH_URI: "{{ AUTH_URI }}"
          NOVA_NEUTRON_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_NOTIFICATIONS: "{{ ENABLE_NOVA_NOTIFICATIONS }}"

    - name: Waiting for Nova API to become available
      wait_for:
        host: "{{ NOVA_API_HOSTNAME }}"
        port: 8774
        state: started

    - name: Start Nova Scheduler container
      docker_container:
        image: os-nova-scheduler
        name: "{{ NOVA_SCHEDULER_HOSTNAME }}"
        hostname: "{{ NOVA_SCHEDULER_HOSTNAME }}"
        restart_policy: always
        env:
          NOVA_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          NOVA_DB_USER: "{{ NOVA_DB_USER }}"
          NOVA_DB_PASS: "{{ NOVA_DB_PASS }}"
          NOVA_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          NOVA_RABBITMQ_USER: "{{ NOVA_RABBITMQ_USER }}"
          NOVA_RABBITMQ_PASS: "{{ NOVA_RABBITMQ_PASS }}"
          NOVA_IDENTITY_URI: "{{ IDENTITY_URI }}"
          NOVA_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_SERVICE_USER: "{{ NOVA_SERVICE_USER }}"
          NOVA_SERVICE_PASS: "{{ NOVA_SERVICE_PASS }}"
          NOVA_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"
          NOVA_USE_IRONIC: "true"
          NOVA_NOTIFICATIONS: "{{ ENABLE_NOVA_NOTIFICATIONS }}"

    - name: Start Nova Compute container
      docker_container:
        image: os-nova-compute
        name: "{{ NOVA_COMPUTE_HOSTNAME }}"
        hostname: "{{ NOVA_COMPUTE_HOSTNAME }}"
        restart_policy: always
        privileged: true
        volumes:
          - /lib/modules:/lib/modules:ro
        env:
          NOVA_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          NOVA_RABBITMQ_USER: "{{ NOVA_RABBITMQ_USER }}"
          NOVA_RABBITMQ_PASS: "{{ NOVA_RABBITMQ_PASS }}"
          NOVA_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"
          NOVA_IDENTITY_URI: "{{ IDENTITY_URI }}"
          NOVA_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_SERVICE_USER: "{{ NOVA_SERVICE_USER }}"
          NOVA_SERVICE_PASS: "{{ NOVA_SERVICE_PASS }}"
          NOVA_GLANCE_API_URLS: "http://{{ GLANCE_API_HOSTNAME }}:9292"
          NOVA_USE_IRONIC: "true"
          NOVA_IRONIC_API_ENDPOINT: "http://{{ IRONIC_API_HOSTNAME }}:6385/v1"
          NOVA_IRONIC_SERVICE_USER: "{{ IRONIC_SERVICE_USER }}"
          NOVA_IRONIC_SERVICE_PASS: "{{ IRONIC_SERVICE_PASS }}"
          NOVA_IRONIC_AUTH_URI: "{{ AUTH_URI }}"
          NOVA_IRONIC_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_NEUTRON_SERVER_URL: "http://{{ NEUTRON_SERVER_HOSTNAME }}:9696"
          NOVA_NEUTRON_SERVICE_USER: "{{ NEUTRON_SERVICE_USER }}"
          NOVA_NEUTRON_SERVICE_PASS: "{{ NEUTRON_SERVICE_PASS }}"
          NOVA_NEUTRON_AUTH_URI: "{{ AUTH_URI }}"
          NOVA_NEUTRON_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NOVA_NOTIFICATIONS: "{{ ENABLE_NOVA_NOTIFICATIONS }}"
          NEUTRON_IDENTITY_URI: "{{ IDENTITY_URI }}"
          NEUTRON_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          NEUTRON_SERVICE_USER: "{{ NEUTRON_SERVICE_USER }}"
          NEUTRON_SERVICE_PASS: "{{ NEUTRON_SERVICE_PASS }}"
          NEUTRON_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          NEUTRON_RABBITMQ_USER: "{{ NEUTRON_RABBITMQ_USER }}"
          NEUTRON_RABBITMQ_PASS: "{{ NEUTRON_RABBITMQ_PASS }}"

    - name: Creating Swift rings data container
      docker_container:
        name: "{{ SWIFT_RINGS_DATA_CONTAINER_NAME }}"
        image: os-base-image
        state: present
        command: /bin/true
        volumes:
          - /etc/swift/rings

    - name: Creating Swift storage data container
      docker_container:
        name: "{{ SWIFT_DEVS_DATA_CONTAINER_NAME }}"
        image: os-base-image
        state: present
        command: /bin/true
        volumes:
          - /srv/node/dev1

    - name: Start Swift Account container
      docker_container:
        image: os-swift-account
        name: "{{ SWIFT_ACCOUNT_HOSTNAME }}"
        hostname: "{{ SWIFT_ACCOUNT_HOSTNAME }}"
        restart_policy: always
        expose: 6002
        volumes_from:
          - "{{ SWIFT_RINGS_DATA_CONTAINER_NAME }}"
          - "{{ SWIFT_DEVS_DATA_CONTAINER_NAME }}"
        env:
          SWIFT_HASH_PATH_PREFIX: "os-in-a-box"
          SWIFT_HASH_PATH_SUFFIX: "os-in-a-box"

    - name: Waiting for Swift Account to become available
      wait_for:
        host: "{{ SWIFT_ACCOUNT_HOSTNAME }}"
        port: 6002
        state: started

    - name: Gather Swift Account container IP address
      shell: "/usr/local/bin/get_docker_ip.sh {{ SWIFT_ACCOUNT_HOSTNAME }}"
      register: swift_account_info
      changed_when: false

    - name: Gather Swift Account container IP address
      set_fact:
        swift_account_ip: "{{ swift_account_info.stdout }}"

    - name: Start Swift Container container
      docker_container:
        image: os-swift-container
        name: "{{ SWIFT_CONTAINER_HOSTNAME }}"
        hostname: "{{ SWIFT_CONTAINER_HOSTNAME }}"
        restart_policy: always
        expose: 6001
        volumes_from:
          - "{{ SWIFT_RINGS_DATA_CONTAINER_NAME }}"
          - "{{ SWIFT_DEVS_DATA_CONTAINER_NAME }}"
        env:
          SWIFT_HASH_PATH_PREFIX: "os-in-a-box"
          SWIFT_HASH_PATH_SUFFIX: "os-in-a-box"

    - name: Waiting for Swift Container to become available
      wait_for:
        host: "{{ SWIFT_CONTAINER_HOSTNAME }}"
        port: 6001
        state: started

    - name: Gather Swift Container container IP address
      shell: "/usr/local/bin/get_docker_ip.sh {{ SWIFT_CONTAINER_HOSTNAME }}"
      register: swift_container_info
      changed_when: false

    - name: Gather Swift Container container IP address
      set_fact:
        swift_container_ip: "{{ swift_container_info.stdout }}"

    - name: Start Swift Object container
      docker_container:
        image: os-swift-object
        name: "{{ SWIFT_OBJECT_HOSTNAME }}"
        hostname: "{{ SWIFT_OBJECT_HOSTNAME }}"
        restart_policy: always
        expose: 6000
        volumes_from:
          - "{{ SWIFT_RINGS_DATA_CONTAINER_NAME }}"
          - "{{ SWIFT_DEVS_DATA_CONTAINER_NAME }}"
        env:
          SWIFT_HASH_PATH_PREFIX: "os-in-a-box"
          SWIFT_HASH_PATH_SUFFIX: "os-in-a-box"

    - name: Waiting for Swift Object to become available
      wait_for:
        host: "{{ SWIFT_OBJECT_HOSTNAME }}"
        port: 6000
        state: started

    - name: Gather Swift Object container IP address
      shell: "/usr/local/bin/get_docker_ip.sh {{ SWIFT_OBJECT_HOSTNAME }}"
      register: swift_object_info
      changed_when: false

    - name: Gather Swift Object container IP address
      set_fact:
        swift_object_ip: "{{ swift_object_info.stdout }}"

    - name: Start Swift Proxy container
      docker_container:
        image: os-swift-proxy
        name: "{{ SWIFT_PROXY_HOSTNAME }}"
        hostname: "{{ SWIFT_PROXY_HOSTNAME }}"
        restart_policy: always
        volumes_from:
          - "{{ SWIFT_RINGS_DATA_CONTAINER_NAME }}"
        ports:
          - 0.0.0.0:8080:8080/tcp
        env:
          SWIFT_IDENTITY_URI: "{{ IDENTITY_URI }}"
          SWIFT_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          SWIFT_SERVICE_USER: "{{ SWIFT_SERVICE_USER }}"
          SWIFT_SERVICE_PASS: "{{ SWIFT_SERVICE_PASS }}"
          SWIFT_MEMCACHED_SERVERS: "{{ MEMCACHED_SERVERS }}"
          SWIFT_HASH_PATH_PREFIX: "os-in-a-box"
          SWIFT_HASH_PATH_SUFFIX: "os-in-a-box"
          SWIFT_REPLICA: "3"
          SWIFT_MIN_PART_HOURS: "1"
          SWIFT_ACCOUNT_BLOCK_DEVICES: "r1z1-{{ swift_account_ip }}:6002/dev1"
          SWIFT_CONTAINER_BLOCK_DEVICES: "r1z1-{{ swift_container_ip }}:6001/dev1"
          SWIFT_OBJECT_BLOCK_DEVICES: "r1z1-{{ swift_object_ip }}:6000/dev1"

    - name: Waiting for Swift Proxy to become available
      wait_for:
        host: "{{ SWIFT_PROXY_HOSTNAME }}"
        port: 8080
        state: started

    - name: Start Glance Registry container
      docker_container:
        image: os-glance-registry
        name: "{{ GLANCE_REGISTRY_HOSTNAME }}"
        hostname: "{{ GLANCE_REGISTRY_HOSTNAME }}"
        restart_policy: always
        expose: 9191/tcp
        env:
          GLANCE_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          GLANCE_DB_USER: "{{ GLANCE_DB_USER }}"
          GLANCE_DB_PASS: "{{ GLANCE_DB_PASS }}"
          GLANCE_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          GLANCE_RABBITMQ_USER: "{{ GLANCE_RABBITMQ_USER }}"
          GLANCE_RABBITMQ_PASS: "{{ GLANCE_RABBITMQ_PASS }}"
          GLANCE_IDENTITY_URI: "{{ IDENTITY_URI }}"
          GLANCE_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          GLANCE_SERVICE_USER: "{{ GLANCE_SERVICE_USER }}"
          GLANCE_SERVICE_PASS: "{{ GLANCE_SERVICE_PASS }}"

    - name: Waiting for Glance Registry to become available
      wait_for:
        host: "{{ GLANCE_REGISTRY_HOSTNAME }}"
        port: 9191
        state: started

    - name: Start Glance API container
      docker_container:
        image: os-glance-api
        name: "{{ GLANCE_API_HOSTNAME }}"
        hostname: "{{ GLANCE_API_HOSTNAME }}"
        restart_policy: always
        ports:
          - 0.0.0.0:9292:9292/tcp
        env:
          GLANCE_DB_HOST: "{{ MYSQL_HOSTNAME }}"
          GLANCE_DB_USER: "{{ GLANCE_DB_USER }}"
          GLANCE_DB_PASS: "{{ GLANCE_DB_PASS }}"
          GLANCE_REGISTRY_HOST: "{{ GLANCE_REGISTRY_HOSTNAME }}"
          GLANCE_RABBITMQ_HOST: "{{ RABBITMQ_HOSTNAME }}"
          GLANCE_RABBITMQ_USER: "{{ GLANCE_RABBITMQ_USER }}"
          GLANCE_RABBITMQ_PASS: "{{ GLANCE_RABBITMQ_PASS }}"
          GLANCE_IDENTITY_URI: "{{ IDENTITY_URI }}"
          GLANCE_SERVICE_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          GLANCE_SERVICE_USER: "{{ GLANCE_SERVICE_USER }}"
          GLANCE_SERVICE_PASS: "{{ GLANCE_SERVICE_PASS }}"
          GLANCE_USE_SWIFT: "true"
          GLANCE_SWIFT_AUTH_ADDR: "{{ AUTH_URI }}"
          GLANCE_SWIFT_TENANT_NAME: "{{ SERVICE_TENANT_NAME }}"
          GLANCE_SWIFT_USER: "{{ GLANCE_SERVICE_USER }}"
          GLANCE_SWIFT_PASS: "{{ GLANCE_SERVICE_PASS }}"
          GLANCE_SWIFT_CONTAINER: "{{ GLANCE_SWIFT_CONTAINER }}"

    - name: Waiting for Glance API to become available
      wait_for:
        host: "{{ GLANCE_API_HOSTNAME }}"
        port: 9292
        state: started

    - name: Get temp-url-key for the service tenant
      shell: |
        docker exec -i "{{ GLANCE_API_HOSTNAME }}" \
          swift --os-username="{{ SERVICE_TENANT_NAME }}:{{ GLANCE_SERVICE_USER }}" \
                --os-password="{{ GLANCE_SERVICE_PASS }}" \
                --os-auth-url="http://{{ DOCKER_SERVER_HOSTNAME }}:5000/v2.0" \
                stat
      register: swift_temp_url_key
      changed_when: false

    - name: Set temp-url-key for the service tenant
      shell: |
        docker exec -i "{{ GLANCE_API_HOSTNAME }}" \
          swift --os-username="{{ SERVICE_TENANT_NAME }}:{{ GLANCE_SERVICE_USER }}" \
                --os-password="{{ GLANCE_SERVICE_PASS }}" \
                --os-auth-url="http://{{ DOCKER_SERVER_HOSTNAME }}:5000/v2.0" \
                post -m temp-url-key:"{{ IRONIC_SWIFT_TEMP_URL_KEY }}"
      when: swift_temp_url_key.stdout.find("{{ IRONIC_SWIFT_TEMP_URL_KEY }}") == -1
